@page "/login"
@using Ecom.Client.Services.AuthService
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService authService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IToastService toastrService
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"/>
        <ValidationMessage For="@(()=> user.Email)"/>
    </div>
     <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"/>
        <ValidationMessage For="@(()=> user.Password)"/>
    </div>

    <button class="btn btn-primary" type="submit">Login</button>
    
</EditForm>

@code {
    private UserLogin user = new UserLogin();

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await authService.LoginUser(user);
        if(result.Success == false)
        {
            toastrService.ShowError(result.Message);
        }
        else
        {
            await localStorage.SetItemAsync("user", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            toastrService.ShowSuccess("User Logged In Successfully!");
            navigationManager.NavigateTo(returnUrl);
        }
    }
}
